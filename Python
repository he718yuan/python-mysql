安装Python 3.10：
1.Python解释器
2.pip包管理器，管理的是扩展的一些库文件（放在Lib/site-package）
3.Python的标准库：Lib

pip包管理器：
安装一个库文件：pip install 库的名字
默认是去官方国外网站下载，速度比较慢。
国内镜像源：（百度搜索）
临时使用：pip install 库的名字 -i 镜像源网址
永久使用：pip文件路径（C:\Users\Hyun\AppData\Local\pip）
	pip.ini系统配置文件内容：
	[global] 
	index-url = https://pypi.tuna.tsinghua.edu.cn/simple
	[install]
	trusted-host=pypi.tuna.tsinghua.edu.cn
卸载一个库文件：pip uninstall 库名 


~、原码、反码、补码：
1.已知十进制负数，求二进制负数：
	1.正数的原码		2.原码取反		3.加1		---->得到的二级制就是负数的二进制
	-7的进制：
		步骤：
		1.先求+7的二进制： 0000 0111 原码
		2.反码： 1111 1000
		3.补码： 1111 1001
		-7的二进制是： 1111 1001
2.已知二进制的负数（判断是否是负的二进制的依据，看二进制的最高位：1111 1001，最高位是1则为负数，0则为正数），求对应的十进制
	1.二进制（负的）		2.二进制减一		3.取反 		4.原码 将原码转换成十进制，在十进制前加负号：-
	已知：二进制： 1111 1010，十进制表示？
		1111 1010 		补码
		-		1
		----------
		1111 1001 		---->反码： 0000 0110

		原码： 0000 0110 	----> 6
		-6
3.~5 ----> 就是将5的二进制取反


字符串相关方法：
find():从左至右查找，一找到符合要求的则返回位置，如果没有找到任何符合要求的则返回-1
rfind():从右至左查找，一找到符合要求的则返回位置，如果没有找到任何符合要求的则返回-1
count():统计指定字符的个数
index():也表示查找，但如果找不到会报错
startswith():判断是否以xxx开头的
endwith():判断是否以xxx结尾的
isalpha():判断是否全由字母组成
isdigit():判断是否全由数字组成
isalnum():判断是否由字母和数字组成
replace():格式：replace(old,new,count)		默认全部替换，可通过count指定次数
split():格式：split('分隔符',maxsplit)	返回结果是一个列表，maxsplit指最多的分割次数
rsplit():用法与split相同，顺序从右边开始
splitlines:按照行分割
capitalize:将首字母大写，其余字母小写（区别于title！）
upper:将字符串中小写字母转换为大写字母
lower:将字符串中大写字母转换为小写字母
ljust,rjust,center:添加空格控制字符串的对齐方式（左、右、居中）
lstrip,rstrip,strip:删除字符串左侧或者右侧的空格
join:字符串的拼接（与+类似）

格式化方式：
1.%d、%f、%s、...
	print('xx:%s' % xxx)
2.format
	name = 'Hyun'
	age = 21
	方法一：
	result = '{}今年{}岁'.format(name,age)
	方法二：使用数字填充，从0开始
	result = '{0}今年{1}岁'.format(name,age)
	方法三：变量名的形式，format的参数必须是关键字参数
	result = '{name}今年{age}岁'.format(name='Hyun',age=21)


列表(list)
定义：名 = []
1.增加
	append：在列表末尾追加新的对象
	extend：在列表末尾追加一个列表
2.修改
	insert：格式：insert（位置，元素）
			插入到当前位置，其他元素往后移动
	index：格式：index（元素）
		   根据元素寻找元素下标，返回值是下标位置
		   修改元素值：列表[index] = 新值
	sort：
3.删除
	pop：pop(index):根据下标删除列表中的元素，下标注意不要超出范围
		 pop():从后往前依次删除
	remove：remove(element)：根据元素名称删除（如果不存在则报错；如果列表中存在多个同名元素，则只删除第一个）
			in：元素 in 列表 （表示是否在列表中，返回值为bool类型）
	clear：清空列表元素

元组(tuple)
相较于列表，元组内的元素不能修改（下标和切片同样适用）
定义：名 = ()
	 注意：如果元组中只有一个元素，必须添加逗号('aaa',) (1,) (2.6,)
方法：
	count()		index()

元组转列表---->list(tuple)
列表转元组---->tuple(list)

字典(dict)
定义：dict = {键1：值，键2：值，键3：值}
	 键是唯一的，值是允许重复的
操作：
	1.添加元素
		字典名[key] = value
	2.修改value值
		字典名[key] = value
关键看“键”，如果字典中不存在键，则是添加
		   如果字典中存在键，则是修改
	3.字典删除
		dict.clear()：清空字典
		dict.pop('key')：根据key实现删除，删除的是键值对
		dict.pipitem()：返回值为元组（键，值），且从后往前删键值对
	4.遍历和查询
		获取：dict.get(key):根据key获取value值
			 dict[key]:根据key获取value值
			 区别：get(key)	里面的key如果不存在则返回None，同时get(key,默认)	可以设置默认值
			 	  dict[key]	报error错
		遍历：如果使用for...in直接遍历字典，取出的是字典的键
			 for i in book:
			 	print(i)
			 获取键值对：字典.items()
			 for k,v in book.items():
				print(k,v)
			 获取字典中所有的value值：字典.values()	就是将所有的值存放到一个列表
			 for v in book.values():
			 	print(v)
			 获取字典中所有的key值：字典.keys()	就是将所有的值存放到一个列表
			 for v in book.keys():
			 	print(v)


集合(set)
特点：无序、不重复
格式：{}		{元素，元素，....}
方法：
	add(element):往集合中添加元素
	update(set):往集合中添加一个集合
	remove(element):删除集合中的元素，不存在则报错
	discard(element):删除集合中的元素，不存在则不做任何操作
	del():删除集合
	clear():清空集合
	pop():随机删除集合中的元素

列表推导式：
	格式一：[i for i in 可迭代]
	格式二：[i for i in 可迭代 if 条件]
	格式三：[结果1 if 条件 else 结果2 for 变量 in 可迭代]


函数
	作用：复用
	格式：def 函数名([参数，....]):
			 代码（封装重复内容）
	调用函数：函数名()

	无参数：
	def 函数名():
		函数体
	有参数：
	def 函数名(参数1,参数2,参数3,....):
		函数体

	判断是否为整型：isinstance(变量，类型)---->返回值为bool
	默认值参数：在定义函数时，有一个或多个参数已经赋好值
		def 函数名(参数1,参数2,参数3=值,参数4=值,参数5=值):
			pass
		函数名(值1，值2)

		注意：在定义函数时，普通参数要位于默认参数之前；默认参数的顺序是固定的，若想要插队赋值，可以在调用时使用关键字参数赋值

	可变参数：*args、**kwargs(一个大容器)
		def 函数名(*args):(返回值为元组)			def 函数名(**kwargs):(返回值是字典)
			pass									pass
		函数名(1,2,3,4)							函数名(xx='xxx',....)(传递的是关键字参数)
		同时使用：
		def 函数名(*args,**kwargs):
			print(args)
			print(kwargs)
		字典 = {'xx':'ss','aa':'ff',....}
		函数名('元素1','元素2'，**字典)

	拆包和装包：在定义函数时加入可变参数，调用时有多个元素，此时会出现装包
				在定义函数时加入可变参数，调用时是一个列表、元组、集合（字典），在它们前面加上*(**)，此时会出现拆包

	返回值：里面的内容向外界传送，需用一个容器接收
		def 函数名(参数,...):
			...
			...
			return xxxx
		当函数调用时通过return向外返回值（也表示结束函数的调用）
		注意：只要函数有返回值，则需要一个容器接收
		return后面的值可以是一个值也可以是多个值
		如果是多个值，类似：return a,b,c，会将多个值封装到一个元组中，将元组作为整体返回

	全局变量和局部变量：
		声明在函数外面的称作全局变量（查看全局变量的使用：globals() ----> 是一个字典，分为系统和自定义）
		声明在函数内部的变量叫做局部变量（查看局部变量：locals() ----> 字典）
		函数内部可以直接使用全局变量，但是不能直接修改全局变量
		如果想修改全局变量，则必须使用关键字：global 全局变量名（全局变量是可变类型无需添加）
		内部函数也看成一个局部变量

	函数的注释：
	def 函数名(参数1,....):
		基本注释		“注释内容”
		高级注释
		'''
			函数的说明

			参数说明：
			：param
			：param

			返回值说明：
			：return
		'''
	
	引用：
	1.不是在函数中使用，可以通过sys.getrefcount(a) 引用个数
		del 变量 		表示删除了一个引用
	2.函数的引用（嵌套）：
		必须要分清传递的值是可变类型还是不可变类型
		如果是可变，里面发生改变，外层就能看到改变后内容
		如果是不可变，里面发生改变，不会影响外部得到变量值
'''
	# 面试

	闭包：
	1.嵌套函数
	2.内部函数引用了外部函数的变量
	3.返回值是内部函数

	装饰器：遵循开放封闭原则，在不改变原函数的情况下，扩展了函数的功能

		定义：{
		def decorater(func):		(形式参数，接收的为要接收的参数house)
			print('---------->1')
			def wrapper():
				func()
				print('精装修')
			print('---------->2')
			return wrapper

		@decorater					装饰器，装饰house(house = decorater(house))
		def house():
			print('毛坯房....')

		house()						地址发生变化，为返回值wrapper的
		}

		装饰：
		@装饰器名 	----->	原函数 = 装饰(原函数)
		def 原函数():
			pass

		功能：
		1.引入日志
		2.函数执行时间统计
		3.执行函数前预备处理
		4.执行函数后清理功能
		5.权限校验等场景
		6.缓存

	带参数的装饰器：（了解）
	如果原函数有参数，则装饰器内部函数也要有参数
	装饰器有返回值函数：（了解）
	原函数有返回值，装饰器的内部函数也要有返回值
'''
	
	递归函数：函数在内部不调用其他的函数，而是自己本身
	遵循 	必须要有出口 	每次递归向出口靠近
	{
		#打印1-10
		def test(i):
			if i == 10:
				print('10')
			else:
				print(i)
				i += 1
				test(i)
		test(1)

		# 1-10的累加和
		def test(n):
    		if n == 10:
        		return 10
    		else:
        		return n + test(n + 1)
		t = test(5)
		print(t)
	}

	匿名函数：
	格式：lambda 参数列表：运算表达式
	使用场合：作为参数传递

	高阶函数：一个函数的参数是另一个函数
	系统高阶函数：max min sorted filter(过滤) map(映射) reduce()
	'''
		# max
		list1 = [('lw', 20), ('uu', 18), ('kk', 22)]
		m = max(list1, key=lambda x: x[1])
		print(m)

		# min
		mi = min(list1, key=lambda x: x[1])
		print(mi)

		# sorted
		s = sorted(list1, key=lambda x: x[1])
		print(s)

		# filter
		f = filter(lambda x: x[1] >= 20,list1)
		print(list(f))

		# map
		m = map(lambda x: x[1],list1)
		print(list(m))

		# reduce
		r = reduce(lambda x,y:x+y,[1,2,3,4,5])
		print(r)
	'''


文件操作：
	with 结合open使用，可以帮助我们自动释放资源（否则需要调用clos()）
	(格式：with open('地址','打开方式') as 别名：)

	os模块：
	os.path里的常用函数：
		os.path.dirname(__file__)获取当前文件所在的文件目录
		os.path.join(path,'')返回的是一个拼接后的新的路径
		os.path.split(path)分割路径与文件名
		os.path.splitext(path)分割文件与扩展名
		os.path.getsize(path)获取文件的大小 单位为字节
	os中的函数：
		os.getcwd()获取当前所在的目录
		os.listdir()浏览当前文件夹
		os.mkdir()创建文件夹
		os.rmdir()删除一个空文件夹
		os.remove()删除文件
		os.chdir()切换目录


异常：
	格式：
	try:
		可能出现异常的代码(可能产生多种异常)
	except (异常类型):
		如果有异常执行的代码
	except (异常类型):
		pass
	...
	[else：
		try中没有发生异常则进入]
	[finally:
		无论是否存在都会被执行的代码]

列表推导式：格式：[表达式 for 变量 in 旧列表] 或者 [表达式 for 变量 in 旧列表 if 条件]
	# 将1-100之间能被3整除，组成一个新列表
	newlist = [i for i in range(1,101) if i%3 == 0]
	print(newlist)
集合推导式：{}类似列表推导式，在列表推导式的基础上添加了一个去除重复项
	list1 = {1,2,3,4,3,2,1,2,5,6}
	set1 = {i for i in list1}
	print(set1)
字典推导式：{key,value for k,v in 字典.items()}


生成器(generator)

定义：可以一边循环一边计算的机制
得到生成器的方式：
	1.通过列表推导式得到生成器（将方括号变成小括号）
	(获取生成器中的元素：
		方式一：通过调用__next__()方式得到元素
		方式二：使用系统内置函数next(生成器对象))
	2.借助函数完成(只要函数中出现了yield关键字，说明函数就不是函数了，变成生成器了)
	(步骤：
		1.定义一个函数，函数中使用yield关键字
		2.调用函数，接收调用的结果
		3.得到的结果就是生成器
		4.借助于next()、__next__()得到元素)
方法：__next__():获取下一个元素
	 send(value):向每次生成器调用中传值(注意:第一次调用send(None))
应用：(进程>线程>协程)
	
可迭代对象：1.生成器 2.元组 列表 集合 字典 字符串
迭代器(Iterator)：可以被next()函数调用并不断返回下一个值的对象(生成器是可迭代的，也是迭代器；list是可迭代的，但不是迭代器)
可以通过iter()函数将可迭代的变成一个迭代器


面向对象

所有的类名要求首字母大写，多个单词使用驼峰式命名
	class 类名[(父类)]:
		属性：特征
		方法：动作

对象属性：先找自己空间的，然后再去模型中找
		 如果自己空间存在该属性，则不会去模型中查找
方法种类：普通方法、类方法、静态方法、魔术方法
	普通方法：
	def 方法名(self[,参数,参数]):
		pass
	魔术方法：
	# 魔术方法：__名字__()
    def __init__(self):  # init 初始的，初始化
        pass
    类方法：
    特点：定义依赖装饰器@classmethod、类方法中的参数不是一个对象而是类、类方法中只可以使用类属性、类方法中不能使用普通方法
	格式：@classmethod
	     def 方法名(cls):
	    	 pass
	作用：不依赖于对象，可以独立完成一些动作
	静态方法：（类似于类方法）
	特点：需要装饰器@staticmethod、无需传递参数、也只能访问类属性类方法、加载时机同类方法
	格式：@staticmethod
	     def 方法名():
	    	 pass

魔术方法：自动执行的方法
	__init__:初始化魔术方法
	触发时机：初始化对象时触发（不是实例化触发，但是和实例化在一个操作中）
	__new__:实例化的魔术方法
	触发时机：在实例化时触发
	__call__:对象调用方法
	触发时机：将对象当成函数使用时，会默认调用此函数中的内容
	__del__：delete的缩写 析构魔术方法(Python解释器默认有垃圾回收机制，编程时可不写，以免出现问题)
	触发时机：当对象没有用（没有任何变量引用）的时候被触发
		1.对象赋值
			p = Person()
			p1 = p
			说明：p和p1共同指向同一地址
		2.删除地址的引用
			del p1 删除p1对地址的引用
		3.查看对地址的引用次数：
			import sys
			sys.getrefcount(p)
		4.当一块地址没有了任何引用，默认执行__del__
	__str__:获取对象的更多信息
	触发时机：打印对象名 自动触发去调用__str__里面的内容
	注意：一定要在__str__方法中添加return,return后面的内容就是打印对象看到内容

总结：重点：__init__（构造方法，创建完空间后调用的第一个方法） __str__
	 了解：__new__：开辟空间 __del__：无指针引用时会调用 __call__：将对象当成函数使用